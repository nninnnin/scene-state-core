{"version":3,"sources":["../src/state/types.ts","../src/state/invariants/checkers/entity/duplicatedEntityName.ts","../src/common/errors.ts","../src/state/invariants/errors.ts","../src/state/invariants/checkers/components/transform/noOrphanTransform.ts","../src/state/invariants/checkers/components/mesh/noOrphanMesh.ts","../src/state/invariants/checkers/components/material/noOrphanMaterial.ts","../src/state/invariants/registry.ts","../src/state/invariants/index.ts","../src/state/errors.ts","../src/state/mutations.ts","../src/state/selectors.ts","../src/state/store.ts","../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import z from \"zod\";\nimport { z_v3 } from \"../migration/validation/schema\";\n\nexport type Vec3 = [\n  number,\n  number,\n  number,\n];\n\nexport interface Entity {\n  name: string;\n}\n\nexport type State = z.infer<\n  typeof z_v3\n>;\n\nexport const CURRENT_SCHEMA_VERSION = 3;\n\nexport function createEmptyState(): State {\n  return {\n    version: CURRENT_SCHEMA_VERSION,\n    entities: {},\n    components: {\n      transform: {},\n    },\n  };\n}\n","import { InvariantChecker } from \"..\";\nimport { EntityId } from \"../../../../common\";\nimport {\n  State,\n  Entity,\n} from \"../../../types\";\n\nexport const duplicatedEntityName: InvariantChecker =\n  {\n    id: \"entity.uniqueName\",\n    onEntityIteration(\n      state: State,\n      _: EntityId,\n      __: Entity,\n    ) {\n      const seen = new Set<string>();\n\n      for (const e of Object.values(\n        state.entities,\n      )) {\n        if (seen.has(e.name))\n          throw new Error(\n            \"엔티티 이름 중복\",\n          );\n\n        seen.add(e.name);\n      }\n    },\n  };\n","export class InvariantError extends Error {\n  constructor(message: string) {\n    super(\n      `[Invariant Error] ${message}`,\n    );\n\n    this.name = new.target.name;\n  }\n}\n\nexport class EntityNotFoundError extends InvariantError {\n  constructor(id: string) {\n    super(`Entity not found: ${id}`);\n\n    this.name = \"EntityNotFoundError\";\n  }\n}\n","import { InvariantError } from \"../../common/errors\";\n\nexport class InvalidEntityError extends InvariantError {\n  constructor(\n    entityId: string,\n    reason: string,\n  ) {\n    super(\n      `Invalid entity ${entityId}: ${reason}`,\n    );\n\n    this.name = \"InvalidEntityError\";\n  }\n}\n\nexport class InvalidComponentError extends InvariantError {\n  constructor(\n    entityId: string,\n    reason: string,\n  ) {\n    super(\n      `Invalid component on ${entityId}: ${reason}`,\n    );\n\n    this.name = \"InvalidComponentError\";\n  }\n}\n","import { InvariantChecker } from \"../..\";\nimport { State } from \"../../../../types\";\nimport { InvalidComponentError } from \"../../../errors\";\nimport { Transform } from \"../../../../../command/types\";\nimport { EntityId } from \"../../../../../common\";\n\nexport const noOrphanTransform: InvariantChecker =\n  {\n    id: \"transform.noOrhpan\",\n    onTransformIteration(\n      state: State,\n      entityId: EntityId,\n      _: Transform,\n    ) {\n      const entity =\n        state.entities[entityId];\n\n      if (!entity) {\n        throw new InvalidComponentError(\n          entityId,\n          \"존재하지 않는 엔티티에 대한 트랜스폼이 존재합니다\",\n        );\n      }\n    },\n  };\n","import { InvariantChecker } from \"../..\";\nimport { State } from \"../../../../types\";\nimport { InvalidComponentError } from \"../../../errors\";\nimport { MeshRef } from \"../../../../../command/types\";\nimport { EntityId } from \"../../../../../common\";\n\nexport const noOrphanMesh: InvariantChecker =\n  {\n    id: \"mesh.noOrhpan\",\n    onMeshIteration(\n      state: State,\n      entityId: EntityId,\n      _: MeshRef,\n    ) {\n      const entity =\n        state.entities[entityId];\n\n      if (!entity) {\n        throw new InvalidComponentError(\n          entityId,\n          \"존재하지 않는 엔티티에 대한 메쉬 레퍼런스가 존재합니다\",\n        );\n      }\n    },\n  };\n","import { InvariantChecker } from \"../..\";\nimport { State } from \"../../../../types\";\nimport { InvalidComponentError } from \"../../../errors\";\nimport { MaterialRef } from \"../../../../../command/types\";\nimport { EntityId } from \"../../../../../common\";\n\nexport const noOrphanMaterial: InvariantChecker =\n  {\n    id: \"material.noOrhpan\",\n    onMaterialIteration(\n      state: State,\n      entityId: EntityId,\n      _: MaterialRef,\n    ) {\n      const entity =\n        state.entities[entityId];\n\n      if (!entity) {\n        throw new InvalidComponentError(\n          entityId,\n          \"존재하지 않는 엔티티에 대한 머티리얼 레퍼런스가 존재합니다\",\n        );\n      }\n    },\n  };\n","import { InvariantMode } from \"./index\";\n\nimport { duplicatedEntityName } from \"./checkers/entity/duplicatedEntityName\";\n\nimport { InvariantChecker } from \"./checkers\";\nimport { noOrphanTransform } from \"./checkers/components/transform/noOrphanTransform\";\nimport { noOrphanMesh } from \"./checkers/components/mesh/noOrphanMesh\";\nimport { noOrphanMaterial } from \"./checkers/components/material/noOrphanMaterial\";\n\nexport const registries: Record<\n  InvariantMode,\n  Array<InvariantChecker>\n> = {\n  onupdate: [\n    duplicatedEntityName,\n    noOrphanTransform,\n    noOrphanMesh,\n    noOrphanMaterial,\n  ],\n  onload: [\n    duplicatedEntityName,\n    noOrphanTransform,\n    noOrphanMesh,\n    noOrphanMaterial,\n  ],\n};\n","import { curry } from \"es-toolkit\";\n\nimport { State } from \"../types\";\nimport { registries } from \"./registry\";\n\nexport type InvariantMode =\n  | \"onupdate\"\n  | \"onload\";\n\nexport const assertInvariants = curry(\n  function (\n    mode: InvariantMode,\n    state: State,\n  ) {\n    const registry = registries[mode];\n\n    // entities iteration\n    for (const [\n      entityId,\n      entity,\n    ] of Object.entries(\n      state.entities,\n    )) {\n      for (const checker of registry) {\n        checker.onEntityIteration &&\n          checker.onEntityIteration(\n            state,\n            entityId,\n            entity,\n          );\n      }\n    }\n\n    // transform iteration\n    for (const [\n      entityId,\n      transform,\n    ] of Object.entries(\n      state.components.transform,\n    )) {\n      for (const checker of registry) {\n        checker.onTransformIteration &&\n          checker.onTransformIteration(\n            state,\n            entityId,\n            transform,\n          );\n      }\n    }\n\n    // mesh iteration\n    for (const [\n      entityId,\n      mesh,\n    ] of Object.entries(\n      state.components.mesh ?? {},\n    )) {\n      for (const checker of registry) {\n        checker.onMeshIteration &&\n          checker.onMeshIteration(\n            state,\n            entityId,\n            mesh,\n          );\n      }\n    }\n\n    // material iteration\n    for (const [\n      entityId,\n      material,\n    ] of Object.entries(\n      state.components.material ?? {},\n    )) {\n      for (const checker of registry) {\n        checker.onMaterialIteration &&\n          checker.onMaterialIteration(\n            state,\n            entityId,\n            material,\n          );\n      }\n    }\n\n    return state;\n  },\n);\n","import { InvariantError } from \"../common/errors\";\n\nexport class DuplicateEntityError extends InvariantError {\n  constructor(id: string) {\n    super(\n      `Entity Duplicated: ${id} is already added`,\n    );\n\n    this.name = \"DuplicateEntityError\";\n  }\n}\n","import { State } from \"./types\";\nimport { EntityId } from \"../common\";\nimport { assertInvariants } from \"./invariants\";\nimport { DuplicateEntityError } from \"./errors\";\n\nexport function addEntity(\n  state: State,\n  id: EntityId,\n  name: string,\n): State {\n  const hasAlready = state.entities[id];\n\n  if (hasAlready) {\n    throw new DuplicateEntityError(id);\n  }\n\n  const next = {\n    ...state,\n    entities: {\n      ...state.entities,\n      [id]: { name },\n    },\n  };\n\n  assertInvariants(\"onupdate\")(next);\n\n  return next;\n}\n\nexport function removeEntity(\n  state: State,\n  id: EntityId,\n): State {\n  const hasEntityId = Boolean(\n    state.entities[id],\n  );\n  if (!hasEntityId) return state;\n\n  const {\n    [id]: _omit,\n    ...restEntities\n  } = state.entities;\n\n  const {\n    [id]: _omitT,\n    ...restTransforms\n  } = state.components.transform;\n\n  const next: State = {\n    ...state,\n    entities: restEntities,\n    components: {\n      ...state.components,\n      transform: restTransforms,\n    },\n  };\n\n  assertInvariants(\"onupdate\")(next);\n\n  return next;\n}\n","import { MeshRef, Transform } from \"../command/types\";\nimport { EntityId } from \"../common\";\nimport { Entity, State, Vec3 } from \"./types\";\n\nexport type ChangeSet = ReadonlySet<EntityId>;\n\ntype CheckTarget<T = unknown> = Record<EntityId, T>;\n\nexport function diff(\n  prev: State,\n  next: State,\n): ChangeSet {\n  const all = new Set<EntityId>();\n\n  unionInto(all, diffEntities(prev, next));\n  unionInto(all, diffTransform(prev, next));\n  unionInto(all, diffMesh(prev, next));\n  unionInto(all, diffMaterial(prev, next));\n\n  return all;\n}\n\nexport function diffEntities(\n  prev: State,\n  next: State,\n): ReadonlySet<EntityId> {\n  const out = new Set<EntityId>();\n\n  checkDiff<Entity>(\n    prev.entities,\n    next.entities,\n    (p, n, id) => p[id].name === n[id].name,\n    out,\n  );\n\n  return out;\n}\n\nexport function diffTransform(\n  prev: State,\n  next: State,\n): ReadonlySet<EntityId> {\n  const out = new Set<EntityId>();\n  checkDiff<Transform>(\n    prev.components.transform,\n    next.components.transform,\n    (p, n, id) => transformEquals(p[id], n[id]),\n    out,\n  );\n  return out;\n}\n\nexport function diffMesh(\n  prev: State,\n  next: State,\n): ReadonlySet<EntityId> {\n  const out = new Set<EntityId>();\n  checkDiff<MeshRef>(\n    prev.components.mesh ?? {},\n    next.components.mesh ?? {},\n    (p, n, id) => p[id] === n[id],\n    out,\n  );\n  return out;\n}\n\nexport function diffMaterial(\n  prev: State,\n  next: State,\n): ReadonlySet<EntityId> {\n  const out = new Set<EntityId>();\n  checkDiff<MeshRef>(\n    prev.components.material ?? {},\n    next.components.material ?? {},\n    (p, n, id) => p[id] === n[id],\n    out,\n  );\n  return out;\n}\n\nexport function changedEntity(\n  id: EntityId,\n  changes: ReadonlySet<EntityId>,\n): boolean {\n  return changes.has(id);\n}\n\nexport function changedAny(\n  ids: Iterable<EntityId>,\n  changes: ReadonlySet<EntityId>,\n): boolean {\n  for (const id of ids)\n    if (changes.has(id)) return true;\n  return false;\n}\n\nexport function collectChanges(\n  prev: State,\n  next: State,\n) {\n  const entities = diffEntities(prev, next);\n  const transform = diffTransform(prev, next);\n  const mesh = diffMesh(prev, next);\n  const material = diffMaterial(prev, next);\n\n  const all = new Set<EntityId>();\n  unionInto(all, entities);\n  unionInto(all, transform);\n  unionInto(all, mesh);\n  unionInto(all, material);\n\n  return {\n    all,\n    entities,\n    transform,\n    mesh,\n    material,\n  } as const;\n}\n\nfunction checkDiff<TargetValue>(\n  prev: CheckTarget<TargetValue>,\n  next: CheckTarget<TargetValue>,\n  equalityChecker: (\n    prev: CheckTarget<TargetValue>,\n    next: CheckTarget<TargetValue>,\n    entityId: EntityId,\n  ) => boolean,\n  changeMemo: Set<EntityId>,\n) {\n  // iterate prev\n  for (const entityId in prev) {\n    if (!(entityId in next)) {\n      // next에서는 없는 경우 (삭제)\n      changeMemo.add(entityId);\n    } else if (\n      !equalityChecker(prev, next, entityId)\n    ) {\n      // 값 변경\n      changeMemo.add(entityId);\n    }\n  }\n\n  // iterate next\n  for (const entityId in next) {\n    if (!(entityId in prev)) {\n      // prev에는 없는 경우 (추가)\n      changeMemo.add(entityId);\n    }\n  }\n\n  return changeMemo;\n}\n\nfunction vec3Equals(a: Vec3, b: Vec3): boolean {\n  return (\n    a[0] === b[0] && a[1] === b[1] && a[2] === b[2]\n  );\n}\n\nfunction transformEquals(\n  a: Transform,\n  b: Transform,\n): boolean {\n  return (\n    vec3Equals(a.position, b.position) &&\n    vec3Equals(a.rotation, b.rotation) &&\n    vec3Equals(a.scale, b.scale)\n  );\n}\n\nfunction unionInto<T>(\n  target: Set<T>,\n  src: ReadonlySet<T>,\n) {\n  for (const v of src) target.add(v);\n}\n","import { State } from \"./types\";\nimport { collectChanges } from \"./selectors\";\n\nexport class Store {\n  private currentState: State;\n  private updateListeners: Set<Listener> = new Set();\n\n  constructor(initialState: State) {\n    this.currentState = initialState;\n  }\n\n  get state() {\n    return this.currentState;\n  }\n\n  update(next: State) {\n    if (this.currentState === next) return;\n\n    const prev = this.currentState;\n    this.currentState = next;\n\n    // call update listeners with changes\n    const changes = collectChanges(prev, next);\n\n    for (const listener of this.updateListeners) {\n      listener({\n        prev,\n        next,\n        changes,\n      });\n    }\n  }\n\n  subscribe(listener: Listener) {\n    this.updateListeners.add(listener);\n\n    const unsubscribe = () =>\n      this.updateListeners.delete(listener);\n\n    return unsubscribe;\n  }\n\n  destroy() {\n    this.updateListeners.clear();\n  }\n}\n\nexport type Listener = (arg: {\n  prev: State;\n  next: State;\n  changes: ReturnType<typeof collectChanges>;\n}) => void;\n\nlet current: State;\n","export const version = () =>\n  \"core-0.0.0\";\n\nexport * from \"./state\";\n"]}