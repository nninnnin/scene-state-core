{"version":3,"sources":["../src/state/types.ts","../src/state/invariants/checkers/entity/duplicatedEntityName.ts","../src/common/errors.ts","../src/state/invariants/errors.ts","../src/state/invariants/checkers/components/transform/noOrphanTransform.ts","../src/state/invariants/checkers/components/mesh/noOrphanMesh.ts","../src/state/invariants/checkers/components/material/noOrphanMaterial.ts","../src/state/invariants/registry.ts","../src/state/invariants/index.ts","../src/state/errors.ts","../src/state/mutations.ts","../src/state/selectors.ts","../src/state/store.ts","../src/transform/index.ts","../src/command/utils/executor.ts","../src/command/commands/CompositeCommand.ts","../src/command/utils/group.ts","../src/command/commands/entity/AddEntityCommand.ts","../src/command/commands/entity/RemoveEntityCommand.ts","../src/command/commands/material/SetMaterialCommand.ts","../src/command/commands/material/ClearMaterialCommand.ts","../src/command/commands/mesh/SetMeshCommand.ts","../src/command/commands/mesh/ClearMeshCommand.ts","../src/command/commands/transform/SetTransformCommand.ts","../src/migration/errors.ts","../src/migration/migrations/0_to_1.ts","../src/migration/migrations/1_to_2.ts","../src/migration/migrations/2_to_3.ts","../src/migration/registry.ts","../src/migration/validation/schema.ts","../src/migration/validation/parseVersioned.ts","../src/migration/apply.ts","../src/state/snapshot.ts","../src/history/HistoryManager.ts","../src/index.ts"],"names":["newTransform","z"],"mappings":"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","file":"index.js","sourcesContent":["import z from \"zod\";\nimport { z_v4 } from \"../migration/validation/schema\";\n\nexport type Vec3 = [number, number, number];\n\nexport interface Entity {\n  name: string;\n}\n\nexport type State = z.infer<typeof z_v4>;\n\nexport const CURRENT_SCHEMA_VERSION = 4;\n\nexport function createEmptyState(): State {\n  return {\n    version: CURRENT_SCHEMA_VERSION,\n    entities: {},\n    components: {\n      transform: {},\n    },\n  };\n}\n","import { InvariantChecker } from \"..\";\nimport { EntityId } from \"../../../../common\";\nimport {\n  State,\n  Entity,\n} from \"../../../types\";\n\nexport const duplicatedEntityName: InvariantChecker =\n  {\n    id: \"entity.uniqueName\",\n    onEntityIteration(\n      state: State,\n      _: EntityId,\n      __: Entity,\n    ) {\n      const seen = new Set<string>();\n\n      for (const e of Object.values(\n        state.entities,\n      )) {\n        if (seen.has(e.name))\n          throw new Error(\n            \"엔티티 이름 중복\",\n          );\n\n        seen.add(e.name);\n      }\n    },\n  };\n","export class InvariantError extends Error {\n  constructor(message: string) {\n    super(\n      `[Invariant Error] ${message}`,\n    );\n\n    this.name = new.target.name;\n  }\n}\n\nexport class EntityNotFoundError extends InvariantError {\n  constructor(id: string) {\n    super(`Entity not found: ${id}`);\n\n    this.name = \"EntityNotFoundError\";\n  }\n}\n","import { InvariantError } from \"../../common/errors\";\n\nexport class InvalidEntityError extends InvariantError {\n  constructor(\n    entityId: string,\n    reason: string,\n  ) {\n    super(\n      `Invalid entity ${entityId}: ${reason}`,\n    );\n\n    this.name = \"InvalidEntityError\";\n  }\n}\n\nexport class InvalidComponentError extends InvariantError {\n  constructor(\n    entityId: string,\n    reason: string,\n  ) {\n    super(\n      `Invalid component on ${entityId}: ${reason}`,\n    );\n\n    this.name = \"InvalidComponentError\";\n  }\n}\n","import { InvariantChecker } from \"../..\";\nimport { State } from \"../../../../types\";\nimport { InvalidComponentError } from \"../../../errors\";\nimport { Transform } from \"../../../../../command/types\";\nimport { EntityId } from \"../../../../../common\";\n\nexport const noOrphanTransform: InvariantChecker =\n  {\n    id: \"transform.noOrhpan\",\n    onTransformIteration(\n      state: State,\n      entityId: EntityId,\n      _: Transform,\n    ) {\n      const entity =\n        state.entities[entityId];\n\n      if (!entity) {\n        throw new InvalidComponentError(\n          entityId,\n          \"존재하지 않는 엔티티에 대한 트랜스폼이 존재합니다\",\n        );\n      }\n    },\n  };\n","import { InvariantChecker } from \"../..\";\nimport { State } from \"../../../../types\";\nimport { InvalidComponentError } from \"../../../errors\";\nimport { MeshRef } from \"../../../../../command/types\";\nimport { EntityId } from \"../../../../../common\";\n\nexport const noOrphanMesh: InvariantChecker =\n  {\n    id: \"mesh.noOrhpan\",\n    onMeshIteration(\n      state: State,\n      entityId: EntityId,\n      _: MeshRef,\n    ) {\n      const entity =\n        state.entities[entityId];\n\n      if (!entity) {\n        throw new InvalidComponentError(\n          entityId,\n          \"존재하지 않는 엔티티에 대한 메쉬 레퍼런스가 존재합니다\",\n        );\n      }\n    },\n  };\n","import { InvariantChecker } from \"../..\";\nimport { State } from \"../../../../types\";\nimport { InvalidComponentError } from \"../../../errors\";\nimport { MaterialRef } from \"../../../../../command/types\";\nimport { EntityId } from \"../../../../../common\";\n\nexport const noOrphanMaterial: InvariantChecker =\n  {\n    id: \"material.noOrhpan\",\n    onMaterialIteration(\n      state: State,\n      entityId: EntityId,\n      _: MaterialRef,\n    ) {\n      const entity =\n        state.entities[entityId];\n\n      if (!entity) {\n        throw new InvalidComponentError(\n          entityId,\n          \"존재하지 않는 엔티티에 대한 머티리얼 레퍼런스가 존재합니다\",\n        );\n      }\n    },\n  };\n","import { InvariantMode } from \"./index\";\n\nimport { duplicatedEntityName } from \"./checkers/entity/duplicatedEntityName\";\n\nimport { InvariantChecker } from \"./checkers\";\nimport { noOrphanTransform } from \"./checkers/components/transform/noOrphanTransform\";\nimport { noOrphanMesh } from \"./checkers/components/mesh/noOrphanMesh\";\nimport { noOrphanMaterial } from \"./checkers/components/material/noOrphanMaterial\";\n\nexport const registries: Record<\n  InvariantMode,\n  Array<InvariantChecker>\n> = {\n  onupdate: [\n    duplicatedEntityName,\n    noOrphanTransform,\n    noOrphanMesh,\n    noOrphanMaterial,\n  ],\n  onload: [\n    duplicatedEntityName,\n    noOrphanTransform,\n    noOrphanMesh,\n    noOrphanMaterial,\n  ],\n};\n","import { curry } from \"es-toolkit\";\n\nimport { State } from \"../types\";\nimport { registries } from \"./registry\";\nimport { Transform } from \"../../command\";\n\nexport type InvariantMode = \"onupdate\" | \"onload\";\n\nexport const assertInvariants = curry(function (\n  mode: InvariantMode,\n  state: State,\n) {\n  const registry = registries[mode];\n\n  // entities iteration\n  for (const [entityId, entity] of Object.entries(\n    state.entities,\n  )) {\n    for (const checker of registry) {\n      checker.onEntityIteration &&\n        checker.onEntityIteration(\n          state,\n          entityId,\n          entity,\n        );\n    }\n  }\n\n  // transform iteration\n  for (const [entityId, transform] of Object.entries(\n    state.components.transform,\n  )) {\n    for (const checker of registry) {\n      checker.onTransformIteration &&\n        checker.onTransformIteration(\n          state,\n          entityId,\n          transform as Transform,\n        );\n    }\n  }\n\n  // mesh iteration\n  for (const [entityId, mesh] of Object.entries(\n    state.components.mesh ?? {},\n  )) {\n    for (const checker of registry) {\n      checker.onMeshIteration &&\n        checker.onMeshIteration(state, entityId, mesh);\n    }\n  }\n\n  // material iteration\n  for (const [entityId, material] of Object.entries(\n    state.components.material ?? {},\n  )) {\n    for (const checker of registry) {\n      checker.onMaterialIteration &&\n        checker.onMaterialIteration(\n          state,\n          entityId,\n          material,\n        );\n    }\n  }\n\n  return state;\n});\n","import { InvariantError } from \"../common/errors\";\n\nexport class DuplicateEntityError extends InvariantError {\n  constructor(id: string) {\n    super(\n      `Entity Duplicated: ${id} is already added`,\n    );\n\n    this.name = \"DuplicateEntityError\";\n  }\n}\n","import { State } from \"./types\";\nimport { EntityId } from \"../common\";\nimport { assertInvariants } from \"./invariants\";\nimport { DuplicateEntityError } from \"./errors\";\n\nexport function addEntity(\n  state: State,\n  id: EntityId,\n  name: string,\n): State {\n  const hasAlready = state.entities[id];\n\n  if (hasAlready) {\n    throw new DuplicateEntityError(id);\n  }\n\n  const next = {\n    ...state,\n    entities: {\n      ...state.entities,\n      [id]: { name },\n    },\n  };\n\n  assertInvariants(\"onupdate\")(next);\n\n  return next;\n}\n\nexport function removeEntity(\n  state: State,\n  id: EntityId,\n): State {\n  const hasEntityId = Boolean(\n    state.entities[id],\n  );\n  if (!hasEntityId) return state;\n\n  const {\n    [id]: _omit,\n    ...restEntities\n  } = state.entities;\n\n  const {\n    [id]: _omitT,\n    ...restTransforms\n  } = state.components.transform;\n\n  const next: State = {\n    ...state,\n    entities: restEntities,\n    components: {\n      ...state.components,\n      transform: restTransforms,\n    },\n  };\n\n  assertInvariants(\"onupdate\")(next);\n\n  return next;\n}\n","import { MeshRef, Transform } from \"../command/types\";\nimport { EntityId } from \"../common\";\nimport { Entity, State, Vec3 } from \"./types\";\n\nexport type ChangeSet = ReadonlySet<EntityId>;\n\ntype CheckTarget<T = unknown> = Record<EntityId, T>;\n\nexport function diff(\n  prev: State,\n  next: State,\n): ChangeSet {\n  const all = new Set<EntityId>();\n\n  unionInto(all, diffEntities(prev, next));\n  unionInto(all, diffTransform(prev, next));\n  unionInto(all, diffMesh(prev, next));\n  unionInto(all, diffMaterial(prev, next));\n\n  return all;\n}\n\nexport function diffEntities(\n  prev: State,\n  next: State,\n): ReadonlySet<EntityId> {\n  const out = new Set<EntityId>();\n\n  checkDiff<Entity>(\n    prev.entities,\n    next.entities,\n    (p, n, id) => p[id].name === n[id].name,\n    out,\n  );\n\n  return out;\n}\n\nexport function diffTransform(\n  prev: State,\n  next: State,\n): ReadonlySet<EntityId> {\n  const out = new Set<EntityId>();\n\n  checkDiff<Transform>(\n    (prev.components.transform ?? {}) as Record<\n      EntityId,\n      Transform\n    >,\n    (next.components.transform ?? {}) as Record<\n      EntityId,\n      Transform\n    >,\n    (p, n, id) => transformEquals(p[id], n[id]),\n    out,\n  );\n  return out;\n}\n\nexport function diffMesh(\n  prev: State,\n  next: State,\n): ReadonlySet<EntityId> {\n  const out = new Set<EntityId>();\n  checkDiff<MeshRef>(\n    prev.components.mesh ?? {},\n    next.components.mesh ?? {},\n    (p, n, id) => p[id] === n[id],\n    out,\n  );\n  return out;\n}\n\nexport function diffMaterial(\n  prev: State,\n  next: State,\n): ReadonlySet<EntityId> {\n  const out = new Set<EntityId>();\n  checkDiff<MeshRef>(\n    prev.components.material ?? {},\n    next.components.material ?? {},\n    (p, n, id) => p[id] === n[id],\n    out,\n  );\n  return out;\n}\n\nexport function changedEntity(\n  id: EntityId,\n  changes: ReadonlySet<EntityId>,\n): boolean {\n  return changes.has(id);\n}\n\nexport function changedAny(\n  ids: Iterable<EntityId>,\n  changes: ReadonlySet<EntityId>,\n): boolean {\n  for (const id of ids)\n    if (changes.has(id)) return true;\n  return false;\n}\n\nexport function collectChanges(\n  prev: State,\n  next: State,\n) {\n  const entities = diffEntities(prev, next);\n  const transform = diffTransform(prev, next);\n  const mesh = diffMesh(prev, next);\n  const material = diffMaterial(prev, next);\n\n  const all = new Set<EntityId>();\n  unionInto(all, entities);\n  unionInto(all, transform);\n  unionInto(all, mesh);\n  unionInto(all, material);\n\n  return {\n    all,\n    entities,\n    transform,\n    mesh,\n    material,\n  } as const;\n}\n\nfunction checkDiff<TargetValue>(\n  prev: CheckTarget<TargetValue>,\n  next: CheckTarget<TargetValue>,\n  equalityChecker: (\n    prev: CheckTarget<TargetValue>,\n    next: CheckTarget<TargetValue>,\n    entityId: EntityId,\n  ) => boolean,\n  changeMemo: Set<EntityId>,\n) {\n  // iterate prev\n  for (const entityId in prev) {\n    if (!(entityId in next)) {\n      // next에서는 없는 경우 (삭제)\n      changeMemo.add(entityId);\n    } else if (\n      !equalityChecker(prev, next, entityId)\n    ) {\n      // 값 변경\n      changeMemo.add(entityId);\n    }\n  }\n\n  // iterate next\n  for (const entityId in next) {\n    if (!(entityId in prev)) {\n      // prev에는 없는 경우 (추가)\n      changeMemo.add(entityId);\n    }\n  }\n\n  return changeMemo;\n}\n\nfunction vec3Equals(a: Vec3, b: Vec3): boolean {\n  return (\n    a[0] === b[0] && a[1] === b[1] && a[2] === b[2]\n  );\n}\n\nfunction transformEquals(\n  a: Transform,\n  b: Transform,\n): boolean {\n  return (\n    vec3Equals(a.position, b.position) &&\n    vec3Equals(a.rotation, b.rotation) &&\n    vec3Equals(a.scale, b.scale)\n  );\n}\n\nfunction unionInto<T>(\n  target: Set<T>,\n  src: ReadonlySet<T>,\n) {\n  for (const v of src) target.add(v);\n}\n","import { State } from \"./types\";\nimport { collectChanges } from \"./selectors\";\nimport { Command } from \"../command/types\";\n\nexport class Store {\n  private currentState: State;\n  private updateListeners: Set<Listener> = new Set();\n\n  constructor(initialState: State) {\n    this.currentState = initialState;\n  }\n\n  get state() {\n    return this.currentState;\n  }\n\n  update(next: State) {\n    if (this.currentState === next) return;\n\n    const prev = this.currentState;\n    this.currentState = next;\n\n    // call update listeners with changes\n    const changes = collectChanges(prev, next);\n\n    for (const listener of this.updateListeners) {\n      listener({\n        prev,\n        next,\n        changes,\n      });\n    }\n  }\n\n  dispatch(command: Command) {\n    this.update(command.execute(this.state));\n  }\n\n  subscribe(listener: Listener) {\n    this.updateListeners.add(listener);\n\n    const unsubscribe = () =>\n      this.updateListeners.delete(listener);\n\n    return unsubscribe;\n  }\n\n  destroy() {\n    this.updateListeners.clear();\n  }\n}\n\nexport type Listener = (arg: {\n  prev: State;\n  next: State;\n  changes: ReturnType<typeof collectChanges>;\n}) => void;\n\nlet current: State;\n","import { Transform } from \"../command/types\";\nimport { EntityId } from \"../common\";\nimport { EntityNotFoundError } from \"../common/errors\";\nimport {\n  State,\n  assertInvariants,\n} from \"../state\";\n\nexport const DEFAULT_TRANSFORM = {\n  position: [0, 0, 0] as [\n    number,\n    number,\n    number,\n  ],\n  rotation: [0, 0, 0] as [\n    number,\n    number,\n    number,\n  ],\n  scale: [1, 1, 1] as [\n    number,\n    number,\n    number,\n  ],\n};\n\n// function overloads\nexport function setTransform(\n  state: State,\n  id: EntityId,\n  t: Transform,\n): State;\nexport function setTransform(\n  state: State,\n  id: EntityId,\n  patch: Partial<Transform>,\n): State;\n\nexport function setTransform(\n  state: State,\n  id: EntityId,\n  input: Transform | Partial<Transform>,\n): State {\n  if (!state.entities[id]) {\n    throw new EntityNotFoundError(id);\n  }\n\n  const prevTransform =\n    state.components.transform[id] ??\n    DEFAULT_TRANSFORM;\n\n  const hasPartialInput = !(\n    \"position\" in input &&\n    \"rotation\" in input &&\n    \"scale\" in input\n  );\n\n  const nextTransform: Transform =\n    hasPartialInput\n      ? {\n          position:\n            input.position ??\n            prevTransform.position,\n          rotation:\n            input.rotation ??\n            prevTransform.rotation,\n          scale:\n            input.scale ??\n            prevTransform.scale,\n        }\n      : (input as Transform);\n\n  const next: State = {\n    ...state,\n    components: {\n      ...state.components,\n      transform: {\n        ...state.components.transform,\n        [id]: nextTransform,\n      },\n    },\n  };\n\n  assertInvariants(\"onupdate\")(next);\n\n  return next;\n}\n","import { State, assertInvariants } from \"../../state\";\n\nimport { Command } from \"../types\";\n\nexport interface ExecuteOptions {\n  validate?: boolean;\n}\n\nexport function applyCommand(\n  state: State,\n  command: Command,\n  options: ExecuteOptions = {},\n) {\n  const next = command.execute(state);\n\n  return (options.validate ?? true)\n    ? assertInvariants(\"onupdate\")(next)\n    : next;\n}\n\nexport function undoCommand(\n  state: State,\n  command: Command,\n  options: ExecuteOptions = {},\n) {\n  const next = command.undo(state);\n\n  return (options.validate ?? true)\n    ? assertInvariants(\"onupdate\")(next)\n    : next;\n}\n","import { State } from \"../../state\";\nimport { Command } from \"../types\";\n\nexport class CompositeCommand implements Command {\n  readonly type = \"composite\";\n  readonly label: string;\n  private readonly commands: Command[];\n\n  constructor(commands: Command[]) {\n    this.label = \"composite\";\n    this.commands = commands;\n  }\n\n  execute(state: State): State {\n    let next = state;\n\n    // sweep\n    for (const cmd of this.commands) {\n      next = cmd.execute(next);\n    }\n\n    return next;\n  }\n\n  undo(state: State): State {\n    let next = state;\n\n    // reverse sweep\n    for (\n      let i = this.commands.length - 1;\n      i >= 0;\n      i--\n    ) {\n      next = this.commands[i].undo(next);\n    }\n\n    return next;\n  }\n\n  isEmpty(): boolean {\n    return this.commands.length === 0;\n  }\n}\n","import { Command } from \"../types\";\nimport { CompositeCommand } from \"../commands/CompositeCommand\";\n\nexport function group(\n  commands: Command[],\n): CompositeCommand {\n  return new CompositeCommand(commands);\n}\n","import {\n  addEntity,\n  removeEntity,\n  State,\n} from \"../../../state\";\nimport { Command } from \"../../types\";\n\nexport class AddEntityCommand\n  implements Command\n{\n  readonly type = \"AddEntity\";\n  readonly description?: string;\n\n  constructor(\n    private entityId: string,\n    private name: string,\n  ) {\n    this.description = `Add entity(${entityId})`;\n  }\n\n  execute(state: State): State {\n    return addEntity(\n      state,\n      this.entityId,\n      this.name,\n    );\n  }\n\n  undo(state: State) {\n    return removeEntity(\n      state,\n      this.entityId,\n    );\n  }\n}\n","import {\n  addEntity,\n  removeEntity,\n  State,\n} from \"../../../state\";\nimport { setTransform } from \"../../../transform\";\n\nimport {\n  Command,\n  Transform,\n} from \"../../types\";\n\nexport class RemoveEntityCommand\n  implements Command\n{\n  readonly type = \"RemoveEntity\";\n  private prevName?: string;\n  private prevTransform?: Transform;\n\n  constructor(\n    private entityId: string,\n  ) {}\n\n  execute(state: State): State {\n    const entity =\n      state.entities[this.entityId];\n\n    this.prevName = entity?.name;\n    this.prevTransform =\n      state.components.transform[\n        this.entityId\n      ];\n\n    return removeEntity(\n      state,\n      this.entityId,\n    );\n  }\n\n  undo(state: State) {\n    if (this.prevName == null)\n      return state;\n\n    let next = addEntity(\n      state,\n      this.entityId,\n      this.prevName,\n    );\n\n    if (this.prevTransform) {\n      next = setTransform(\n        next,\n        this.entityId,\n        this.prevTransform,\n      );\n    }\n\n    return next;\n  }\n}\n","import { EntityId } from \"../../../common\";\nimport { EntityNotFoundError } from \"../../../common/errors\";\nimport { State } from \"../../../state\";\nimport { Command } from \"../../types\";\n\ntype MaterialRef = string;\n\nexport class SetMaterialCommand\n  implements Command\n{\n  readonly type = \"Setmaterial\";\n\n  constructor(\n    private id: EntityId,\n    private materialRef: MaterialRef,\n    private prevMaterial?: string,\n  ) {}\n\n  execute(state: State): State {\n    if (!state.entities[this.id]) {\n      throw new EntityNotFoundError(\n        this.id,\n      );\n    }\n\n    const prevMaterial =\n      state.components.material?.[\n        this.id\n      ];\n\n    const nextState: State = {\n      ...state,\n      components: {\n        ...state.components,\n        material: {\n          ...(state.components\n            .material ?? {}),\n          [this.id]: this.materialRef,\n        },\n      },\n    };\n\n    this.prevMaterial = prevMaterial;\n\n    return nextState;\n  }\n\n  undo(state: State): State {\n    const material = {\n      ...(state.components.material ??\n        {}),\n    };\n\n    if (this.prevMaterial) {\n      material[this.id] =\n        this.prevMaterial;\n    } else {\n      delete material[this.id];\n    }\n\n    return {\n      ...state,\n      components: {\n        ...state.components,\n        material,\n      },\n    };\n  }\n}\n","import { EntityId } from \"../../../common\";\nimport { EntityNotFoundError } from \"../../../common/errors\";\nimport { State } from \"../../../state\";\n\nimport { Command } from \"../../types\";\n\nexport class ClearMaterialCommand\n  implements Command\n{\n  type = \"ClearMaterial\";\n\n  private prevMaterial?: string;\n  constructor(private id: EntityId) {}\n\n  execute(state: State): State {\n    if (!state.entities[this.id])\n      throw new EntityNotFoundError(\n        this.id,\n      );\n\n    const material = {\n      ...(state.components.material ??\n        {}),\n    };\n\n    this.prevMaterial =\n      material[this.id];\n\n    if (\n      material[this.id] !== undefined\n    ) {\n      delete material[this.id];\n    }\n\n    return {\n      ...state,\n      components: {\n        ...state.components,\n        material,\n      },\n    };\n  }\n\n  undo(state: State): State {\n    const material = {\n      ...(state.components.material ??\n        {}),\n    };\n\n    if (this.prevMaterial) {\n      material[this.id] =\n        this.prevMaterial;\n    }\n\n    return {\n      ...state,\n      components: {\n        ...state.components,\n        material,\n      },\n    };\n  }\n}\n","import { EntityId } from \"../../../common\";\nimport { EntityNotFoundError } from \"../../../common/errors\";\nimport { State } from \"../../../state\";\nimport { Command } from \"../../types\";\n\ntype MeshRef = string;\n\nexport class SetMeshCommand\n  implements Command\n{\n  readonly type = \"SetMesh\";\n\n  constructor(\n    private id: EntityId,\n    private meshRef: MeshRef,\n    private prevMesh?: string,\n  ) {}\n\n  execute(state: State): State {\n    if (!state.entities[this.id]) {\n      throw new EntityNotFoundError(\n        this.id,\n      );\n    }\n\n    const prevMesh =\n      state.components.mesh?.[this.id];\n\n    const nextState: State = {\n      ...state,\n      components: {\n        ...state.components,\n        mesh: {\n          ...(state.components.mesh ??\n            {}),\n          [this.id]: this.meshRef,\n        },\n      },\n    };\n\n    this.prevMesh = prevMesh;\n\n    return nextState;\n  }\n\n  undo(state: State): State {\n    const mesh = {\n      ...(state.components.mesh ?? {}),\n    };\n\n    if (this.prevMesh) {\n      mesh[this.id] = this.prevMesh;\n    } else {\n      delete mesh[this.id];\n    }\n\n    return {\n      ...state,\n      components: {\n        ...state.components,\n        mesh,\n      },\n    };\n  }\n}\n","import { EntityId } from \"../../../common\";\nimport { EntityNotFoundError } from \"../../../common/errors\";\nimport { State } from \"../../../state\";\n\nimport { Command } from \"../../types\";\n\nexport class ClearMeshCommand\n  implements Command\n{\n  type = \"ClearMesh\";\n\n  private prevMesh?: string;\n  constructor(private id: EntityId) {}\n\n  execute(state: State): State {\n    if (!state.entities[this.id])\n      throw new EntityNotFoundError(\n        this.id,\n      );\n\n    const mesh = {\n      ...(state.components.mesh ?? {}),\n    };\n\n    this.prevMesh = mesh[this.id];\n\n    if (mesh[this.id] !== undefined) {\n      delete mesh[this.id];\n    }\n\n    return {\n      ...state,\n      components: {\n        ...state.components,\n        mesh,\n      },\n    };\n  }\n\n  undo(state: State): State {\n    const mesh = {\n      ...(state.components.mesh ?? {}),\n    };\n\n    if (this.prevMesh) {\n      mesh[this.id] = this.prevMesh;\n    }\n\n    return {\n      ...state,\n      components: {\n        ...state.components,\n        mesh,\n      },\n    };\n  }\n}\n","import { State } from \"../../../state\";\nimport {\n  Command,\n  Transform,\n} from \"../../types\";\nimport { setTransform } from \"../../../transform\";\n\nexport class SetTransformCommand\n  implements Command\n{\n  readonly type = \"SetTransform\";\n  private prev?: Transform;\n\n  constructor(\n    private entityId: string,\n    private patch: Partial<Transform>,\n  ) {}\n\n  execute(state: State): State {\n    this.prev =\n      state.components.transform[\n        this.entityId\n      ];\n\n    return setTransform(\n      state,\n      this.entityId,\n      this.patch,\n    );\n  }\n\n  undo(state: State): State {\n    if (this.prev) {\n      return setTransform(\n        state,\n        this.entityId,\n        this.prev,\n      );\n    }\n\n    return state;\n  }\n}\n","export class MigrationError extends Error {\n  name = \"MigrationError\";\n}\n\nexport class NoMigrationPathError extends MigrationError {\n  readonly from: number;\n  readonly to: number;\n\n  constructor(\n    from: number,\n    to: number,\n  ) {\n    super(\n      `No migration path: ${from} -> ${to}`,\n    );\n\n    this.name = \"NoMigrationPathError\";\n    this.from = from;\n    this.to = to;\n  }\n}\n","import { Migration } from \"../types\";\nimport {\n  StateV0,\n  StateV1,\n} from \"../validation/state.types\";\n\n/**\n *\n * Migration from v0 to v1\n *\n * - Add version field\n * - Add transform value fallback\n *\n */\nexport const m0_to_1: Migration = {\n  from: 0,\n  to: 1,\n  apply(state: StateV0): StateV1 {\n    return {\n      ...state,\n      entities: state.entities ?? {},\n      components: {\n        ...state.components,\n        transform:\n          state.components?.transform ??\n          {},\n      },\n      version: 1,\n    };\n  },\n};\n","import { Transform } from \"../../command/types\";\nimport { EntityId } from \"../../common\";\nimport { Vec3 } from \"../../state\";\nimport { DEFAULT_TRANSFORM } from \"../../transform\";\nimport {\n  StateV1,\n  StateV2,\n} from \"../validation/state.types\";\n\nimport { Migration } from \"../types\";\n\n/**\n *\n * Migration from v1 to v2\n *\n * - Sanitize transform value\n *   - Remove orphan transforms\n *   - Ensure every transform(position, rotation, scale) values\n *\n */\n\nexport const m1_to_2: Migration = {\n  from: 1,\n  to: 2,\n  apply(state: StateV1): StateV2 {\n    const newState = { ...state };\n\n    const entities =\n      newState.entities ?? {};\n    const transform =\n      newState.components?.transform ??\n      {};\n\n    // 1) Remove Orphan transforms\n    const newTransform: Record<\n      EntityId,\n      Transform\n    > = Object.keys(transform).reduce(\n      (newTransform, entityId) => {\n        const hasEntity =\n          entities[entityId];\n\n        if (hasEntity) {\n          const entityTransform =\n            transform[entityId] ??\n            DEFAULT_TRANSFORM;\n\n          // 2) Ensure every transform values\n          newTransform[entityId] = {\n            position: sanitizeVector3(\n              entityTransform.position,\n              DEFAULT_TRANSFORM.position,\n            ),\n            rotation: sanitizeVector3(\n              entityTransform.rotation,\n              DEFAULT_TRANSFORM.rotation,\n            ),\n            scale: sanitizeVector3(\n              entityTransform.scale,\n              DEFAULT_TRANSFORM.scale,\n              1, // zero replacement\n            ),\n          };\n        }\n\n        return newTransform;\n      },\n      {} as Record<EntityId, Transform>,\n    );\n\n    return {\n      ...newState,\n      components: {\n        ...(newState.components ?? {}),\n        transform: newTransform,\n      },\n      version: 2,\n    };\n  },\n};\n\nfunction isFiniteNum(value: number) {\n  return (\n    typeof value === \"number\" &&\n    Number.isFinite(value)\n  );\n}\n\nfunction sanitizeVector3(\n  input: unknown,\n  defaultVector: Vec3,\n  zeroReplacement?: number,\n): Vec3 {\n  const vector = Array.isArray(input)\n    ? input\n    : defaultVector;\n\n  const [inputX, inputY, inputZ] =\n    vector;\n  const [defaultX, defaultY, defaultZ] =\n    defaultVector;\n\n  const x = isFiniteNum(inputX)\n    ? inputX\n    : defaultX;\n  const y = isFiniteNum(inputY)\n    ? inputY\n    : defaultY;\n  const z = isFiniteNum(inputZ)\n    ? inputZ\n    : defaultZ;\n\n  const sanitized: Vec3 = [x, y, z];\n\n  return zeroReplacement\n    ? (sanitized.map((el) =>\n        el === 0 ? zeroReplacement : el,\n      ) as Vec3)\n    : sanitized;\n}\n","import { Migration } from \"../types\";\nimport {\n  StateV2,\n  StateV3,\n} from \"../validation/state.types\";\n\nexport const m2_to_3: Migration = {\n  from: 2,\n  to: 3,\n  apply(prev: StateV2): StateV3 {\n    const filterEntityOriented = (\n      map: Record<string, unknown>,\n    ): Record<string, string> => {\n      return Object.fromEntries(\n        Object.entries(map).filter(\n          ([entityId, value]) => {\n            const hasEntityOriented =\n              prev.entities[\n                entityId\n              ] !== undefined;\n            const hasValidValue =\n              typeof value === \"string\";\n\n            return (\n              hasEntityOriented &&\n              hasValidValue\n            );\n          },\n        ),\n      ) as Record<string, string>;\n    };\n\n    const newState: StateV3 = {\n      version: 3,\n      entities: prev.entities,\n      components: {\n        transform:\n          prev.components.transform,\n        mesh: filterEntityOriented(\n          (prev as any).components\n            ?.mesh ?? {},\n        ),\n        material: filterEntityOriented(\n          (prev as any).components\n            ?.material ?? {},\n        ),\n      },\n    };\n\n    return newState;\n  },\n};\n","import { m0_to_1 } from \"./migrations/0_to_1\";\nimport { m1_to_2 } from \"./migrations/1_to_2\";\nimport { m2_to_3 } from \"./migrations/2_to_3\";\nimport type { Migration } from \"./types\";\n\nexport const MIGRATIONS: Migration[] = [\n  m0_to_1,\n  m1_to_2,\n  m2_to_3,\n];\n","import { z } from \"zod\";\nimport { CURRENT_SCHEMA_VERSION } from \"../../state\";\n\nconst zNum = z.number();\n\nexport const zVec3Finite = z.tuple([zNum, zNum, zNum]);\n\n// previous versions of state schema\nexport const z_v0 = z.looseObject({\n  version: z.number().optional(),\n  entities: z.record(z.string(), z.any()).optional(),\n  components: z\n    .object({\n      transform: z\n        .record(z.string(), z.any())\n        .optional(),\n    })\n    .partial()\n    .optional(),\n});\n\nexport const z_v1 = z.looseObject({\n  version: z.literal(1),\n  entities: z.record(\n    z.string(),\n    z.object({\n      name: z.string().min(1),\n    }),\n  ),\n  components: z\n    .object({\n      transform: z\n        .record(\n          z.string(),\n          z.object({\n            position: z.any().optional(),\n            rotation: z.any().optional(),\n            scale: z.any().optional(),\n          }),\n        )\n        .default({}),\n    })\n    .default({ transform: {} }),\n});\n\nexport const z_v2 = z.object({\n  version: z.literal(2),\n  entities: z.record(\n    z.string(),\n    z.object({\n      name: z.string().min(1),\n    }),\n  ),\n  components: z.object({\n    transform: z.record(\n      z.string(),\n      z.object({\n        position: zVec3Finite,\n        rotation: zVec3Finite,\n        scale: zVec3Finite,\n      }),\n    ),\n  }),\n});\n\nexport const z_v3 = z.object({\n  version: z.literal(3),\n  entities: z.record(\n    z.string(),\n    z.object({\n      name: z.string().min(1),\n    }),\n  ),\n  components: z.object({\n    transform: z.record(\n      z.string(),\n      z.object({\n        position: zVec3Finite,\n        rotation: zVec3Finite,\n        scale: zVec3Finite,\n      }),\n    ),\n    mesh: z.record(z.string(), z.string()).optional(),\n    material: z\n      .record(z.string(), z.string())\n      .optional(),\n  }),\n});\n\n// current schema\nexport const z_v4 = z.object({\n  version: z.literal(CURRENT_SCHEMA_VERSION),\n  entities: z.record(\n    z.string(),\n    z.object({\n      name: z.string().min(1),\n    }),\n  ),\n  components: z.object({\n    transform: z.record(\n      z.string(),\n      z\n        .object({\n          position: zVec3Finite,\n          rotation: zVec3Finite,\n          scale: zVec3Finite,\n        })\n        .optional(),\n    ),\n    mesh: z.record(z.string(), z.string()).optional(),\n    material: z\n      .record(z.string(), z.string())\n      .optional(),\n  }),\n});\n","import { z } from \"zod\";\n\nimport { VersionedInput } from \"./state.types\";\nimport {\n  z_v0,\n  z_v1,\n  z_v2,\n} from \"./schema\";\n\nconst preprocessor = (raw: any) => {\n  if (\n    typeof raw !== \"object\" ||\n    raw === null\n  ) {\n    return raw;\n  }\n\n  const obj = raw as Record<\n    string,\n    any\n  >;\n\n  return {\n    ...obj,\n    version: obj.version ?? 0,\n  };\n};\n\nconst zAnyVersion = z.preprocess(\n  preprocessor,\n  z.discriminatedUnion(\"version\", [\n    z_v0.extend({\n      version: z.literal(0),\n    }), // `version` 필드가 옵셔널이면 공통된 필드가 존재하지 않으므로 discriminated union일 수 없다.\n    z_v1,\n    z_v2,\n  ]),\n);\n\nexport function parseVersioned(\n  input: unknown,\n): VersionedInput {\n  const parsed =\n    zAnyVersion.safeParse(input);\n\n  // 버전이 0이었거나 비어있었지만 전처리기에서 0으로 초기화 된 경우\n  if (\n    parsed.success &&\n    parsed.data.version === 0\n  ) {\n    // 최소한의 상태 모양과 기존의 데이터를 유지한 채로 반환\n    return {\n      version: 0,\n      entities:\n        parsed.data.entities ?? {},\n      components: {\n        transform:\n          parsed.data.components\n            ?.transform ?? {},\n      },\n    };\n  } else if (parsed.error) {\n    // null, 1, 'hello' 등 오브젝트 조차 아닌 값이었을 때\n    return {\n      version: 0,\n      entities: {},\n      components: { transform: {} },\n    };\n  }\n\n  // 버전 0이 아닌 일반적인 상태 형상이었을 때\n  return parsed.data as VersionedInput;\n}\n","import {\n  CURRENT_SCHEMA_VERSION,\n  assertInvariants,\n} from \"../state\";\nimport { NoMigrationPathError } from \"./errors\";\nimport { MIGRATIONS } from \"./registry\";\nimport { parseVersioned } from \"./validation/parseVersioned\";\n\nimport {\n  LatestSchema,\n  VersionedInput,\n} from \"./validation/state.types\";\n\nconst migrationMap = new Map(\n  MIGRATIONS.map((m) => [m.from, m]),\n);\n\nfunction checkOutVersioned(\n  input: unknown,\n) {\n  const isObject =\n    typeof input === \"object\" &&\n    input !== null;\n\n  const rawVersion = isObject\n    ? (input as any).version\n    : undefined;\n\n  if (\n    typeof rawVersion === \"number\" &&\n    rawVersion > CURRENT_SCHEMA_VERSION\n  ) {\n    throw new NoMigrationPathError(\n      rawVersion,\n      CURRENT_SCHEMA_VERSION,\n    );\n  }\n}\n\nexport interface MigrateOptions {\n  // future version 허용 상한 (undefined면 허용 안 함)\n  allowFutureVersionsUpTo?: number;\n}\n\nexport function migrateState(\n  input: unknown,\n  options?: MigrateOptions,\n) {\n  const migrateTo =\n    options?.allowFutureVersionsUpTo ??\n    CURRENT_SCHEMA_VERSION;\n\n  // 1) 스키마 유효성 검사\n  const parsedState: VersionedInput =\n    parseVersioned(input);\n\n  // 버전 유효성 검사\n  checkOutVersioned(input);\n\n  let migratedState:\n    | VersionedInput\n    | LatestSchema = parsedState;\n\n  // 2) 최신 스키마로 마이그레이션\n  while (\n    migratedState.version !== migrateTo\n  ) {\n    const currentMigration =\n      migrationMap.get(\n        migratedState.version,\n      );\n\n    if (!currentMigration) {\n      throw new NoMigrationPathError(\n        migratedState.version,\n        migrateTo,\n      );\n    }\n\n    migratedState =\n      currentMigration.apply(\n        migratedState,\n      );\n  }\n\n  // 3) 무결성 검사\n  const invariantCheckedState =\n    assertInvariants(\"onload\")(\n      migratedState as LatestSchema,\n    );\n\n  return invariantCheckedState;\n}\n","import { State } from \"./types\";\n\nexport type Snapshot = Readonly<State>;\n\nexport function takeSnapshot(\n  state: State,\n): Snapshot {\n  return state as Snapshot;\n}\n\nexport function rollbackTo(\n  snapshot: Snapshot,\n): State {\n  return snapshot as State;\n}\n","import { isEqual } from \"es-toolkit\";\n\nimport { CompositeCommand } from \"../command/commands/CompositeCommand\";\nimport { Command } from \"../command/types\";\nimport { migrateState } from \"../migration/apply\";\nimport {\n  State,\n  Store,\n  assertInvariants,\n} from \"../state\";\nimport {\n  rollbackTo,\n  Snapshot,\n  takeSnapshot,\n} from \"../state/snapshot\";\n\ntype Entry = {\n  label: string;\n  command: Command;\n};\n\ntype CollectCommand = (command: Command) => void;\n\ntype JumpOptions = {\n  history?: \"replace\" | \"preserve\";\n};\n\nexport class HistoryManager {\n  private undoStack: Entry[] = [];\n  private redoStack: Entry[] = [];\n  private store: Store;\n\n  private checkpoints: Map<string, Snapshot> =\n    new Map();\n\n  constructor(store: Store) {\n    this.store = store;\n  }\n\n  get state(): State {\n    return this.store.state;\n  }\n\n  get stacks() {\n    const mapEntryLabel = (entries: Entry[]) =>\n      entries.map((entry) => entry.label);\n\n    return {\n      undoStack: mapEntryLabel(this.undoStack),\n      redoStack: mapEntryLabel(this.redoStack),\n    };\n  }\n\n  group<T>(\n    label: string,\n    collector: (collectCommand: CollectCommand) => T,\n  ): T {\n    const bucket: Array<Command> = [];\n    const snapshot = this.store.state;\n\n    let result: T;\n\n    try {\n      result = collector((c: Command) =>\n        bucket.push(c),\n      );\n\n      if (bucket.length === 0) return result;\n\n      const composite = new CompositeCommand(bucket);\n      const executed = composite.execute(snapshot);\n\n      if (executed === snapshot) return result; // no-op\n\n      this.undoStack.push({\n        label,\n        command: composite,\n      });\n      this.redoStack = [];\n      this.store.update(executed);\n\n      return result;\n    } catch (error) {\n      this.store.update(snapshot); // rollback\n\n      throw error;\n    }\n  }\n\n  execute(command: Command): void {\n    const prev = this.store.state;\n    const next = command.execute(prev);\n\n    if (isEqual(prev, next)) {\n      return;\n    }\n\n    this.undoStack.push({\n      label: command.type,\n      command,\n    });\n    this.redoStack = [];\n    this.store.update(next);\n  }\n\n  undo(): void {\n    const entry = this.undoStack.pop();\n\n    if (!entry) {\n      console.log(\"Has no undo stack\");\n      return;\n    }\n\n    const prev = this.store.state;\n    const next = entry.command.undo(prev);\n\n    this.redoStack.push(entry);\n    this.store.update(next);\n  }\n\n  redo(): void {\n    const entry = this.redoStack.pop();\n\n    if (!entry) {\n      console.log(\"Has no redo stack\");\n      return;\n    }\n\n    const prev = this.store.state;\n    const next = entry.command.execute(prev);\n\n    this.undoStack.push(entry);\n    this.store.update(next);\n  }\n\n  clear() {\n    this.undoStack = [];\n    this.redoStack = [];\n  }\n\n  createCheckpoint(id: string): Snapshot {\n    const snapshot = takeSnapshot(this.store.state);\n\n    this.checkpoints.set(id, snapshot);\n\n    return snapshot;\n  }\n\n  jumpToSnapshot(\n    snapshot: Snapshot,\n    opts: JumpOptions = {\n      history: \"replace\",\n    },\n  ) {\n    const restored = rollbackTo(snapshot);\n    const migrated = migrateState(restored);\n    const validated =\n      assertInvariants(\"onload\")(migrated);\n\n    this.store.update(validated);\n\n    if (opts.history === \"replace\") {\n      this.undoStack = [];\n      this.redoStack = [];\n    }\n\n    return this.store.state;\n  }\n\n  jumpToCheckpoint(\n    id: string,\n    opts?: JumpOptions,\n  ): State {\n    const snap = this.checkpoints.get(id);\n\n    if (!snap) return this.store.state;\n\n    return this.jumpToSnapshot(snap, opts);\n  }\n\n  listCheckpoints(): string[] {\n    return Array.from(this.checkpoints.keys());\n  }\n\n  removeCheckpoint(id: string): boolean {\n    return this.checkpoints.delete(id);\n  }\n\n  clearCheckpoints(): void {\n    this.checkpoints.clear();\n  }\n}\n","export const version = () => \"core-0.0.0\";\n\nexport * from \"./state\";\nexport * from \"./transform\";\nexport * from \"./command\";\nexport * from \"./history\";\n"]}