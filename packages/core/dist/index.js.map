{"version":3,"sources":["../src/state/types.ts","../src/state/invariants/checkers/entity/duplicatedEntityName.ts","../src/common/errors.ts","../src/state/invariants/errors.ts","../src/state/invariants/checkers/components/transform/noOrphanTransform.ts","../src/state/invariants/checkers/components/mesh/noOrphanMesh.ts","../src/state/invariants/checkers/components/material/noOrphanMaterial.ts","../src/state/invariants/registry.ts","../src/state/invariants/index.ts","../src/state/errors.ts","../src/state/mutations.ts","../src/state/store.ts","../src/index.ts"],"names":[],"mappings":"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","file":"index.js","sourcesContent":["import z from \"zod\";\nimport { z_v3 } from \"../migration/validation/schema\";\n\nexport type Vec3 = [\n  number,\n  number,\n  number,\n];\n\nexport interface Entity {\n  name: string;\n}\n\nexport type State = z.infer<\n  typeof z_v3\n>;\n\nexport const CURRENT_SCHEMA_VERSION = 3;\n\nexport function createEmptyState(): State {\n  return {\n    version: CURRENT_SCHEMA_VERSION,\n    entities: {},\n    components: {\n      transform: {},\n    },\n  };\n}\n","import { InvariantChecker } from \"..\";\nimport { EntityId } from \"../../../../common\";\nimport {\n  State,\n  Entity,\n} from \"../../../types\";\n\nexport const duplicatedEntityName: InvariantChecker =\n  {\n    id: \"entity.uniqueName\",\n    onEntityIteration(\n      state: State,\n      _: EntityId,\n      __: Entity,\n    ) {\n      const seen = new Set<string>();\n\n      for (const e of Object.values(\n        state.entities,\n      )) {\n        if (seen.has(e.name))\n          throw new Error(\n            \"엔티티 이름 중복\",\n          );\n\n        seen.add(e.name);\n      }\n    },\n  };\n","export class InvariantError extends Error {\n  constructor(message: string) {\n    super(\n      `[Invariant Error] ${message}`,\n    );\n\n    this.name = new.target.name;\n  }\n}\n\nexport class EntityNotFoundError extends InvariantError {\n  constructor(id: string) {\n    super(`Entity not found: ${id}`);\n\n    this.name = \"EntityNotFoundError\";\n  }\n}\n","import { InvariantError } from \"../../common/errors\";\n\nexport class InvalidEntityError extends InvariantError {\n  constructor(\n    entityId: string,\n    reason: string,\n  ) {\n    super(\n      `Invalid entity ${entityId}: ${reason}`,\n    );\n\n    this.name = \"InvalidEntityError\";\n  }\n}\n\nexport class InvalidComponentError extends InvariantError {\n  constructor(\n    entityId: string,\n    reason: string,\n  ) {\n    super(\n      `Invalid component on ${entityId}: ${reason}`,\n    );\n\n    this.name = \"InvalidComponentError\";\n  }\n}\n","import { InvariantChecker } from \"../..\";\nimport { State } from \"../../../../types\";\nimport { InvalidComponentError } from \"../../../errors\";\nimport { Transform } from \"../../../../../command/types\";\nimport { EntityId } from \"../../../../../common\";\n\nexport const noOrphanTransform: InvariantChecker =\n  {\n    id: \"transform.noOrhpan\",\n    onTransformIteration(\n      state: State,\n      entityId: EntityId,\n      _: Transform,\n    ) {\n      const entity =\n        state.entities[entityId];\n\n      if (!entity) {\n        throw new InvalidComponentError(\n          entityId,\n          \"존재하지 않는 엔티티에 대한 트랜스폼이 존재합니다\",\n        );\n      }\n    },\n  };\n","import { InvariantChecker } from \"../..\";\nimport { State } from \"../../../../types\";\nimport { InvalidComponentError } from \"../../../errors\";\nimport { MeshRef } from \"../../../../../command/types\";\nimport { EntityId } from \"../../../../../common\";\n\nexport const noOrphanMesh: InvariantChecker =\n  {\n    id: \"mesh.noOrhpan\",\n    onMeshIteration(\n      state: State,\n      entityId: EntityId,\n      _: MeshRef,\n    ) {\n      const entity =\n        state.entities[entityId];\n\n      if (!entity) {\n        throw new InvalidComponentError(\n          entityId,\n          \"존재하지 않는 엔티티에 대한 메쉬 레퍼런스가 존재합니다\",\n        );\n      }\n    },\n  };\n","import { InvariantChecker } from \"../..\";\nimport { State } from \"../../../../types\";\nimport { InvalidComponentError } from \"../../../errors\";\nimport { MaterialRef } from \"../../../../../command/types\";\nimport { EntityId } from \"../../../../../common\";\n\nexport const noOrphanMaterial: InvariantChecker =\n  {\n    id: \"material.noOrhpan\",\n    onMaterialIteration(\n      state: State,\n      entityId: EntityId,\n      _: MaterialRef,\n    ) {\n      const entity =\n        state.entities[entityId];\n\n      if (!entity) {\n        throw new InvalidComponentError(\n          entityId,\n          \"존재하지 않는 엔티티에 대한 머티리얼 레퍼런스가 존재합니다\",\n        );\n      }\n    },\n  };\n","import { InvariantMode } from \"./index\";\n\nimport { duplicatedEntityName } from \"./checkers/entity/duplicatedEntityName\";\n\nimport { InvariantChecker } from \"./checkers\";\nimport { noOrphanTransform } from \"./checkers/components/transform/noOrphanTransform\";\nimport { noOrphanMesh } from \"./checkers/components/mesh/noOrphanMesh\";\nimport { noOrphanMaterial } from \"./checkers/components/material/noOrphanMaterial\";\n\nexport const registries: Record<\n  InvariantMode,\n  Array<InvariantChecker>\n> = {\n  onupdate: [\n    duplicatedEntityName,\n    noOrphanTransform,\n    noOrphanMesh,\n    noOrphanMaterial,\n  ],\n  onload: [\n    duplicatedEntityName,\n    noOrphanTransform,\n    noOrphanMesh,\n    noOrphanMaterial,\n  ],\n};\n","import { curry } from \"es-toolkit\";\n\nimport { State } from \"../types\";\nimport { registries } from \"./registry\";\n\nexport type InvariantMode =\n  | \"onupdate\"\n  | \"onload\";\n\nexport const assertInvariants = curry(\n  function (\n    mode: InvariantMode,\n    state: State,\n  ) {\n    const registry = registries[mode];\n\n    // entities iteration\n    for (const [\n      entityId,\n      entity,\n    ] of Object.entries(\n      state.entities,\n    )) {\n      for (const checker of registry) {\n        checker.onEntityIteration &&\n          checker.onEntityIteration(\n            state,\n            entityId,\n            entity,\n          );\n      }\n    }\n\n    // transform iteration\n    for (const [\n      entityId,\n      transform,\n    ] of Object.entries(\n      state.components.transform,\n    )) {\n      for (const checker of registry) {\n        checker.onTransformIteration &&\n          checker.onTransformIteration(\n            state,\n            entityId,\n            transform,\n          );\n      }\n    }\n\n    // mesh iteration\n    for (const [\n      entityId,\n      mesh,\n    ] of Object.entries(\n      state.components.mesh ?? {},\n    )) {\n      for (const checker of registry) {\n        checker.onMeshIteration &&\n          checker.onMeshIteration(\n            state,\n            entityId,\n            mesh,\n          );\n      }\n    }\n\n    // material iteration\n    for (const [\n      entityId,\n      material,\n    ] of Object.entries(\n      state.components.material ?? {},\n    )) {\n      for (const checker of registry) {\n        checker.onMaterialIteration &&\n          checker.onMaterialIteration(\n            state,\n            entityId,\n            material,\n          );\n      }\n    }\n\n    return state;\n  },\n);\n","import { InvariantError } from \"../common/errors\";\n\nexport class DuplicateEntityError extends InvariantError {\n  constructor(id: string) {\n    super(\n      `Entity Duplicated: ${id} is already added`,\n    );\n\n    this.name = \"DuplicateEntityError\";\n  }\n}\n","import { State } from \"./types\";\nimport { EntityId } from \"../common\";\nimport { assertInvariants } from \"./invariants\";\nimport { DuplicateEntityError } from \"./errors\";\n\nexport function addEntity(\n  state: State,\n  id: EntityId,\n  name: string,\n): State {\n  const hasAlready = state.entities[id];\n\n  if (hasAlready) {\n    throw new DuplicateEntityError(id);\n  }\n\n  const next = {\n    ...state,\n    entities: {\n      ...state.entities,\n      [id]: { name },\n    },\n  };\n\n  assertInvariants(\"onupdate\")(next);\n\n  return next;\n}\n\nexport function removeEntity(\n  state: State,\n  id: EntityId,\n): State {\n  const hasEntityId = Boolean(\n    state.entities[id],\n  );\n  if (!hasEntityId) return state;\n\n  const {\n    [id]: _omit,\n    ...restEntities\n  } = state.entities;\n\n  const {\n    [id]: _omitT,\n    ...restTransforms\n  } = state.components.transform;\n\n  const next: State = {\n    ...state,\n    entities: restEntities,\n    components: {\n      ...state.components,\n      transform: restTransforms,\n    },\n  };\n\n  assertInvariants(\"onupdate\")(next);\n\n  return next;\n}\n","import { State } from \"./types\";\n\nlet current: State;\n\nexport function init(initial: State) {\n  current = initial;\n}\n\nexport function getState(): State {\n  return current;\n}\n","export const version = () =>\n  \"core-0.0.0\";\n\nexport * from \"./state\";\n"]}